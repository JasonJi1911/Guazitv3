<?php
namespace api\models\video;

use api\dao\CommonDao;
use api\helpers\Common;
use common\helpers\OssHelper;
use common\helpers\RedisKey;
use common\helpers\RedisStore;
use common\helpers\Tool;

class Video extends \common\models\video\Video
{
    public function fields()
    {
        return [
            'video_id' => 'id',
            'channel_id',
            'category_ids',
            'category' => function(){
                return $this->getCategory($this->category_ids);
            },
            'video_name' => 'title',
            'source',
            'summary',
            'intro' => 'description',
            'keywords',
            'title_en',
            'issue_date',
            'score' => function(){
                return bcdiv($this->score, 10, 1);
            },
            'type',
            'flag' => function(){
                if ($this->type == self::STATUS_DISABLED) {
                    if ($this->is_finished == self::STATUS_FINISHED) {
                        $flag = $this->episode_num . '集全';
                    } else {
                        $flag = '更新至' . $this->episode_num . '集';
                    }
                } else {
                    if (\Yii::$app->common->product == Common::PRODUCT_PC) {
                        $flag = '';
                    } else {
                        $flag = bcdiv($this->score, 10, 1);
                    }
                }
                return $flag;
            },
            'area',
            'year',
            'tag' => function(){
                if (!isset(self::$playLimitMap[$this->play_limit])) {
                    return  '';
                }
                return $this->play_limit == self::PLAY_LIMIT_FREE ? '' : self::$playLimitMap[$this->play_limit];
            },
            'play_limit', // 播放限制
            'cover' => function(){
                return $this->cover->toUrl();
            },
            'horizontal_cover' => function() {
                if ($this->horizontal_cover) {
                    return $this->horizontal_cover->toUrl();
                } else {
                    return $this->cover->toUrl();
                }
            },
            'episode_num',
            'total_views' => function() {
                return $this->total_views;
            },
            'play_times' => function () {
                if ($this->total_views<=10000) {
                    return '播放:'.$this->total_views;
                } else {
                    return '播放:'. (round($this->total_views/10000, 2)).'万+';
                }
            },
            'total_favors',
            'is_sensitive',
            'created_at',
            'total_price',
            'is_down'
        ];
    }
    
    public function getYears(){
        return $this->hasOne(VideoYear::className(), ['id' => 'year']);
    }


    /**
     * 获取前三个分类名称
     * @param $catId
     * @return string
     */
    public function getCategory($catId)
    {
        $commonDao = new CommonDao();
        $category = $commonDao->videoCategory(true);
        $catArr = explode(',', $catId);
        $strCat = '';

        foreach ($catArr as $num => $cat) {
            if ($num > 2) { // 最多显示3个分类名称
                break;
            }
            if (!isset($category[$cat])) {
                continue;
            }
            $strCat .= ' ' .  $category[$cat]['name'];
        }
        return trim($strCat);
    }

    /**
     * {@inheritdoc}
     * @return \xiang\db\ActiveQuery the newly created [[ActiveQuery]] instance.
     */
    public static function find()
    {
        return parent::find()
            ->andWhere([self::tableName() . '.status' => self::STATUS_ENABLED, 'is_sensitive' => self::SENSITIVITY_NO])
            ->andFilterWhere(['like', 'publish_clients', self::currentProduct()]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (!$insert) {
            Tool::batchClearCache(RedisKey::recommendVideo(''));
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function currentProduct()
    {
        return \Yii::$app->common->product;
    }
}
