<?php
namespace admin\models\video;

use common\helpers\RedisKey;
use common\helpers\Tool;
use yii\helpers\ArrayHelper;

class Recommend extends \common\models\video\Recommend
{
    public $tag;
    public $area;
    public $year;
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'style', 'display_order'], 'required'],
            [['channel_id', 'display_order', 'status', 'style'], 'integer'],
            [['tag', 'area', 'year'], 'integer'],
            [['title'], 'string', 'min' => 0, 'max' => 32],
            [['search', 'description'], 'string', 'min' => 0, 'max' => 256],
            [['display_order'], 'integer', 'min' => DISPLAY_ORDER_MIN, 'max' => DISPLAY_ORDER_MAX],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'channel_id' => '频道',
            'title' => '标题',
            'search' => 'Search',
            'description' => '描述',
            'display_order' => '排序',
            'status' => '状态',
            'style' => '前端显示样式',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'deleted_at' => 'Deleted At',
        ];
    }

    public function beforeSave($insert)
    {
        $search = [];
        if ($this->tag) {
            array_push($search, ['field' => 'tag', 'value' => $this->tag]);
        }
        if ($this->area) {
            array_push($search, ['field' => 'area', 'value' => $this->area]);
        }
        if ($this->year) {
            array_push($search, ['field' => 'year', 'value' => $this->year]);
        }
        $this->search = json_encode($search);
        return parent::beforeSave($insert);
    }
    
    /**
     * @param $channelId
     * @return array
     * 标签
     */
    public function getCategory($channelId)
    {
        // 如果没有传$channelId，则获取排序最大的一个
        if (empty($channelId)) {
            $videoChannel = VideoChannel::find()
                ->orderBy(['display_order' => SORT_DESC])
                ->one();
            $channelId = $videoChannel->id;
        }
        $channel = VideoCategory::find()
            ->where(['channel_id' => $channelId])
            ->orderBy(['display_order' => SORT_DESC])
            ->all();

        $channel = ArrayHelper::map($channel, 'id', 'title');

        return $channel;
    }

    /**
     * @param $channelId
     * @return array
     * 地区
     */
    public function getArea($channelId)
    {
        if ($channelId) {
            $channel = VideoChannel::findOne($channelId);
        } else {
            // 如果没有传$channelId，则获取排序最大的一个
            $channel = VideoChannel::find()
                ->orderBy(['display_order' => SORT_DESC])
                ->one();
        }
        $area = VideoArea::find()
            ->where(['id' => explode(',', $channel->areas)])
            ->orderBy(['display_order' => SORT_DESC])
            ->all();
        $area = ArrayHelper::map($area, 'id', 'area');

        return $area;
    }

    public function getChannel()
    {
        return $this->hasOne(VideoChannel::className(), ['id' => 'channel_id']);
    }

    public function getSearch($field)
    {
        if (!$this->search) {
            return '';
        }
        $search = ArrayHelper::index(json_decode($this->search, true), 'field');
        return !empty($search[$field]['value']) ? $search[$field]['value'] : '';
    }
    
    public function getStyleLabel()
    {
        return ArrayHelper::getValue(self::$styleMap, $this->style);
    }

    public static function find()
    {
        return parent::find()->addOrderBy([self::tableName() . '.updated_at' => SORT_DESC, self::tableName() . '.display_order' => SORT_DESC]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        //清除缓存
        $key = RedisKey::channelRecommend($this->channel_id);
        Tool::clearCache($key);

        if (!$insert) {
            Tool::clearCache(RedisKey::recommendInfo($this->id));
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
